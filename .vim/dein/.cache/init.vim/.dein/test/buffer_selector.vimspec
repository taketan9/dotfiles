Describe Test for buffer_selector
  Before all
    let V = vital#of('vital')
    let PowerAssert = V.import('Vim.PowerAssert')
    let s:assert = PowerAssert.assert
  End

  It test_GetBufNo
    let buffers_buffer =  '  1  h   "[無名]"                       行 0'
        \ . "\n" . '  9  h   "[無名]"                       行 0'
        \ . "\n" . ' 10  h   "[無名]"                       行 0'
        \ . "\n" . '119 %a   "[無名]"                       行 1'

    put!=buffers_buffer

    call cursor(1, 1)
    let bufno = buffer_selector#GetBufNo()
    execute s:assert('bufno is# "1"')

    call cursor(2, 1)
    let bufno = buffer_selector#GetBufNo()
    execute s:assert('bufno is# "9"')

    call cursor(3, 1)
    let bufno = buffer_selector#GetBufNo()
    execute s:assert('bufno is# "10"')

    call cursor(4, 1)
    let bufno = buffer_selector#GetBufNo()
    execute s:assert('bufno is# "119"')

    """ 後片付け
    normal ggVGd
  End

  It test_FitWinCol
    let before_win_col = winheight('.')
    let buffers_buffer =  '  1  h   "[無名]"                       行 0'
        \ . "\n" . '  9  h   "[無名]"                       行 0'
    put!=buffers_buffer
    call buffer_selector#FitWinCol()
    let after_win_col = winheight('.')

    """ 最後に空行ができるので、put で挿入した行数 + 1 が FitWinCol 後の高さ
    execute s:assert('after_win_col is# 3')

    """ 後片付け
    normal ggVGd
    normal _
  End

  It Open selected buffer in window that calling OpenBufferSelector.
    split
    let before_window_id = win_getid()
    call buffer_selector#OpenBufferSelector()
    call buffer_selector#OpenBuffer()
    let after_window_id = win_getid()
    execute s:assert('after_window_id is# before_window_id')
  End

  It When the buffer selector is closed, it returns to the buffer that called OpenBufferSelector.
    split
    let before_window_id = win_getid()
    call buffer_selector#OpenBufferSelector()
    call buffer_selector#CloseBufferSelector()
    let after_window_id = win_getid()
    execute s:assert('after_window_id is# before_window_id')
  End
End
